<AuthorizeView Roles="User">
    <Authorized>

        @page "/users"
        @* @inject HttpClient http *@
        @using Application.DTOs
        @inject IUserService _userService
        @inject IJSRuntime js
        @using System.Text.Json

        <h3>Users</h3>

        <div style="margin-bottom:10px">
            <a class="btn btn-outline-success" href="create/user">Criar usuário</a>
        </div>

        @if (_userDTO == null)
        {
            <div id="erroCategory"><h4>Carregando...</h4></div>
        }
        else
        {
            <div class="table-responsive">
                <table class="table">
                    <thead>
                        <tr>
                            <th>Id</th>
                            <th>UserName</th>
                            <th>Editar</th>
                            <th>Deletar</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var userDTO in _userDTO)
                        {
                            <tr>
                                <td>@userDTO.Id</td>
                                <td>@userDTO.UserName</td>
                                <td><a href="/userPermissions/@userDTO.Id" class="btn btn-primary">Permissões</a></td>
                                <td><button class="btn btn-danger" @onclick="@(() => DeletarCategoria(userDTO.Id, userDTO.UserName))">Deletar</button></td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }


        <Confirma @ref="_confirma" onCancela="@CancelaConfirma" onConfirma="@DeleteConfirma">
            <div>Deseja Realmente excluir o usuário <b><i>@NomeUser</i></b> ?</div>
        </Confirma>

        @code {

        private IEnumerable<UserDTO>? _userDTO { get; set; }
        private Confirma? _confirma;

        private string? IdUser;
        private string? NomeUser { get; set; }

        protected override async Task OnInitializedAsync()
        {

            _userDTO = await _userService.GetUsersAsync();
            // var httpResponse = await http.GetAsync($"api/user/all");

            // if (httpResponse.IsSuccessStatusCode)
            // {
            //     _userDTO = JsonSerializerGeneric<UserDTO>.ReturnList(await httpResponse.Content.ReadAsStringAsync());
            // }
        }

        private void DeletarCategoria(Guid id, string nomeUser)
        {
            _confirma.Exibir();
            IdUser = id.ToString();
            NomeUser = nomeUser;
        }

        private async Task CancelaConfirma()
        {
            _confirma.Ocultar();
        }

        private async Task DeleteConfirma()
        {
            await _userService.DeleteUserAsync(IdUser);
            _confirma.Ocultar();
            _userDTO = _userDTO.Where(user => user.Id != Guid.Parse(IdUser)).ToList();
            // await http.DeleteAsync($"api/user/{IdUser}");
            // _confirma.Ocultar();
            // _userDTO = _userDTO.Where(user => user.Id != Guid.Parse(IdUser)).ToList();

        }

        }
    </Authorized>
    <NotAuthorized>
        <Index />
    </NotAuthorized>
</AuthorizeView>