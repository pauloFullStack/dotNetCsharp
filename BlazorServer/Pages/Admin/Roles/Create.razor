@* <AuthorizeView Roles="Admin,User">
    <Authorized>
 *@
        @page "/create/role"
        @inject HttpClient http
        @attribute [Authorize]
        @inject NavigationManager navigation
        @inject JavaScriptService js

<h3>Criar Permissão</h3>


<EditForm Model="@aspNetRolesDTO" OnValidSubmit="@CreateRoleAsync">
    <!-- O DataAnnotationsValidator está dentro do EditForm -->
    <DataAnnotationsValidator />

    <!-- Seus campos e validações vão aqui -->
    <div style="padding:10px 0">
        <label form="nome">Nome</label>
        <InputText id="txtCategoriaNome" @bind-Value="aspNetRolesDTO.Name" class="form-control" />
        <span class="notification-inputs"></span>
        <div style="margin-top:5px">
            <ValidationMessage For="@(() => aspNetRolesDTO.Name)" />
        </div>
    </div>

    <!-- Seus botões de ação -->
    <div style="padding:10px 0">
        <a href="listRoles" class="btn btn-outline-dark">Voltar</a>&nbsp;&nbsp;
        <button type="submit" class="btn btn-success">Salvar</button>
    </div>
</EditForm>


@code {

    AspNetRolesDTO aspNetRolesDTO = new AspNetRolesDTO();


    /* O método OnAfterRenderAsync é chamado após o componente ser renderizado */
    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            await js.FocusById("txtCategoriaNome");
    }


    private async Task CreateRoleAsync()
    {
        await http.PostAsJsonAsync("api/AspNetRoles", aspNetRolesDTO);
        navigation.NavigateTo("listRoles");
    }
        }
    @* </Authorized>
    <NotAuthorized>
        <Index />
    </NotAuthorized>
</AuthorizeView> *@