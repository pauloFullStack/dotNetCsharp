<AuthorizeView Roles="Admin,User">
    <Authorized>

        @page "/create/role"
        @* @inject HttpClient http *@
        @* @attribute [Authorize] *@
        @inject NavigationManager navigation
        @inject IAspNetRolesService _aspNetRolesService
        @inject JavaScriptService js
        @inject IJSRuntime ijsRuntime

        <h3>Criar Permissão</h3>


        <div>
            <!-- O DataAnnotationsValidator está dentro do EditForm -->
            @* <DataAnnotationsValidator /> *@

            <!-- Seus campos e validações vão aqui -->
            <div style="padding:10px 0">
                <label form="nome">Nome</label>
                <input id="txtCategoriaNome" @bind="aspNetRolesDTO.Name" class="form-control" />
                <span class="notification-inputs"></span>
                @* <div style="margin-top:5px">
                    <ValidationMessage For="@(() => aspNetRolesDTO.Name)" />
                </div> *@
            </div>

            <!-- Seus botões de ação -->
            <div style="padding:10px 0">
                <a href="listRoles" class="btn btn-outline-dark">Voltar</a>&nbsp;&nbsp;
                <button type="button" @onclick="CreateRoleAsync" class="btn btn-success">Salvar</button>
            </div>
        </div>


        @code {

        AspNetRolesDTO aspNetRolesDTO = new AspNetRolesDTO();
        NotificationsDTO notificationsDTO;

        /* O método OnAfterRenderAsync é chamado após o componente ser renderizado */
        protected async override Task OnAfterRenderAsync(bool firstRender)
        {
            if (firstRender)
                await js.FocusById("txtCategoriaNome");
        }


        private async Task CreateRoleAsync()
        {

            try
            {
                notificationsDTO = await _aspNetRolesService.AddAsync(aspNetRolesDTO);
                if (notificationsDTO.Status == "success")
                {
                    bool status = await ijsRuntime.InvokeAsync<bool>("confirm", $"{notificationsDTO.Message}, voltar para lista de permissões");
                    if (status)
                    {
                        navigation.NavigateTo("listRoles");
                    }
                }
                else
                {
                    // Fazer um modal para notificar
                }

            }
            catch (Exception ex)
            {

                throw;
            }
            // await http.PostAsJsonAsync("api/AspNetRoles", aspNetRolesDTO);
            // navigation.NavigateTo("listRoles");
        }
        }
    </Authorized>
    <NotAuthorized>
        <Index />
    </NotAuthorized>
</AuthorizeView>