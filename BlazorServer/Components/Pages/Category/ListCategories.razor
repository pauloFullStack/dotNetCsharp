@using Application.DTOs
@using System.Text.Json

@page "/"

@rendermode InteractiveServer

@inject HttpClient http
@inject IJSRuntime js

@* Teste para ver se javascript funciona *@
@* <button onclick="showQuote()">Show Quote</button>

<div id="quoteContainer"></div>

<input id="increment" type="hidden" value="1" /> *@


@if (_categorias == null)
{
    <div id="erroCategory"><h4>Carregando...</h4></div>
}
else if (!_categorias.Any())
{
    <h4>Nenhum categoria encontrada</h4>
}
else
{

    <div style="padding:15px 0">
        <div class="row">
            <div class="col-lg-9 col-sm-12">
                <input type="text" class="form-control mb-2 mr-sm-2" @bind="nomeFiltro" placeholder="Filtrar pelo nome" />
            </div>

            <div class="col-lg-3 col-sm-12">
                <div style="display:flex;align-items:center;justify-content:flex-start;width:100%;padding:0 0 0 10px">
                    <div>
                        <button style="width:100%" type="button" class="btn btn-primary mr-sm-2 mb-2" @onclick="Filtrar">
                            Filtrar
                        </button>
                    </div>

                    <div style="padding: 0 0 0 10px">
                        <button style="width:100%" type="button" class="btn btn-outline-dark mb-2" @onclick="LimparFiltro">
                            Limpar
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div style="margin-bottom:10px">
        <a class="btn btn-outline-success" href="category/create">Criar cate</a>
    </div>

    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Descrição</th>
                <th>Editar</th>
                <th>Deletar</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var categoria in _categorias)
            {
                <tr>
                    <td>@categoria.Id</td>
                    <td>@categoria.Name</td>
                    <td>
                        <a href="category/@categoria.Id/edit/">
                            <svg style="color:blue;" xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-pencil-fill" viewBox="0 0 16 16">
                                <path d="M12.854.146a.5.5 0 0 0-.707 0L10.5 1.793 14.207 5.5l1.647-1.646a.5.5 0 0 0 0-.708l-3-3zm.646 6.061L9.793 2.5 3.293 9H3.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.207l6.5-6.5zm-7.468 7.468A.5.5 0 0 1 6 13.5V13h-.5a.5.5 0 0 1-.5-.5V12h-.5a.5.5 0 0 1-.5-.5V11h-.5a.5.5 0 0 1-.5-.5V10h-.5a.499.499 0 0 1-.175-.032l-.179.178a.5.5 0 0 0-.11.168l-2 5a.5.5 0 0 0 .65.65l5-2a.5.5 0 0 0 .168-.11l.178-.178z" />
                            </svg>
                        </a>
                    </td>
                    <td>
                        <a href="#" @onclick="@(() => DeletarCategoria(categoria.Id, categoria.Name))" >
                            <svg style="color:red;cursor:pointer" xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-x-lg" viewBox="0 0 16 16">
                                <path d="M2.146 2.854a.5.5 0 1 1 .708-.708L8 7.293l5.146-5.147a.5.5 0 0 1 .708.708L8.707 8l5.147 5.146a.5.5 0 0 1-.708.708L8 8.707l-5.146 5.147a.5.5 0 0 1-.708-.708L7.293 8z" />
                            </svg>
                        </a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}


<ModalConfirma @ref="confirma" onCancela="@CancelaConfirma" onConfirma="@DeleteConfirma">
    <div>Deseja Realmente excluir a Categoria <b><i>@NomeCategoria</i></b> ?</div>
</ModalConfirma>

@if (showPagination)
{
    <Pagination QuantidadeTotalPaginas="@QuantidadeTotalPaginas"
                paginaAtual="@paginaAtual"
                Raio="2"
                PaginaSelecionadaCallBack="PaginaSelecionadaCallBack">
    </Pagination>
}

@code {
    // Ver se tem como colocar essa regra em uma classe, criar uma extensão desse arquivo igual fiz nomeComponente.razor.css, pode ser que seja nomeComponente.class.razor algo assim pesquisar...
    private IEnumerable<CategoryDTO>? _categorias { get; set; }
    private bool _categoriasCarregadas = false;
    private int IdCategoria;

    private ModalConfirma? confirma;
    private bool showPagination;
    private int QuantidadeTotalPaginas { get; set; }
    private int TotalCategoriasPorPaginas { get; set; }
    private int paginaAtual = 1;
    private string? NomeCategoria { get; set; }

    private string nomeFiltro = string.Empty;


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!_categoriasCarregadas)
        {
            await CarregaCategorias();
            _categoriasCarregadas = true;
        }
    }

    private async Task CarregaCategorias(int pagina = 1, int quantidadePorPagina = 5)
    {
        try
        {
            var httpResponse = await http.GetAsync($"api/category?pagina={pagina}&quantidadePorPagina={quantidadePorPagina}&nomeFiltro={nomeFiltro}");
            if (httpResponse.IsSuccessStatusCode)
            {
                QuantidadeTotalPaginas = int.Parse(httpResponse.Headers.GetValues("totalPaginas").FirstOrDefault());
                var responseString = await httpResponse.Content.ReadAsStringAsync();

                _categorias = JsonSerializer.Deserialize
                 <List<CategoryDTO>>(responseString, new JsonSerializerOptions() { PropertyNameCaseInsensitive = true });

                // Pego a quantidade de categorias que veio em cada pagina
                TotalCategoriasPorPaginas = _categorias.Count();

                if (int.Parse(httpResponse.Headers.GetValues("quantidadeRegistroTotal").FirstOrDefault()) > quantidadePorPagina)
                    showPagination = true;
                else
                    showPagination = false;

                StateHasChanged();
            }
        }
        catch (Exception)
        {
            await js.InvokeVoidAsync("showErroCategory", "erroCategory", "Erro category teste");
        }

    }

    private async Task CancelaConfirma()
    {
        confirma.Ocultar();
    }

    private async Task DeleteConfirma()
    {
        await http.DeleteAsync($"api/category/{IdCategoria}");
        confirma.Ocultar();

        if (TotalCategoriasPorPaginas == 1 && paginaAtual > 1)
        {
            await CarregaCategorias(--paginaAtual);
        }
        else
        {
            await CarregaCategorias(paginaAtual);
        }

    }

    private void DeletarCategoria(int id, string nomeCategoria)
    {
        confirma.Exibir();
        IdCategoria = id;
        NomeCategoria = nomeCategoria;
    }

    private async Task PaginaSelecionadaCallBack(int pagina)
    {
        paginaAtual = pagina;
        await CarregaCategorias(pagina);
    }

    private async Task Filtrar()
    {
        paginaAtual = 1;
        await CarregaCategorias();
    }

    private async Task LimparFiltro()
    {
        nomeFiltro = string.Empty;
        paginaAtual = 1;
        await CarregaCategorias();
    }

}
