<nav aria-label="Paginacao">
    <ul class="pagination justify-content-center">
        @foreach (var link in links)
        {
            <li @onclick="@(() => PaginaSelecionadaLink(link))"
                style="cursor:pointer"
                class="page-item @(link.Enabled ? null : "disabled") @(link.Active ? "active" : null)">
                <span class="page-link" href="#">@link.Text</span>
            </li>
        }
    </ul>
</nav>


@code {

    [Parameter]
    public int paginaAtual { get; set; } = 1;

    [Parameter]
    public int QuantidadeTotalPaginas { get; set; }

    [Parameter]
    public int Raio { get; set; } = 3;

    [Parameter]
    public EventCallback<int> PaginaSelecionadaCallBack { get; set; }

    List<LinkModel>? links;

    class LinkModel
    {
        public LinkModel(int page) : this(page, true) { }
        public LinkModel(int page, bool enabled) : this(page, enabled, page.ToString()) { }
        public LinkModel(int page, bool enabled, string text)
        {
            Page = page;
            Enabled = enabled;
            Text = text;
        }

        public string Text { get; set; }
        public int Page { get; set; }
        public bool Enabled { get; set; } = true;
        public bool Active { get; set; } = false;

    }

    /* OnParametersSetAsync é outro método do ciclo de vida em páginas Razor no ASP.NET Core.
     * Assim como o OnInitializedAsync, ele lida com a inicialização da página, mas é específico para a
     * atualização de parâmetros. */
    protected async override Task OnParametersSetAsync()
    {
        CarregaPagina();
    }

    private void CarregaPagina()
    {
        links = new List<LinkModel>();


        /* Tratar o link da pagina anterior */
        var isLinkPaginaAnteriorHabilitado = paginaAtual != 1;
        var paginaAnterior = paginaAtual - 1;
        links.Add(new LinkModel(paginaAnterior, isLinkPaginaAnteriorHabilitado, "Anterior"));



        /* Tratando os links das paginas especificas */
        for (int i = 1; i < QuantidadeTotalPaginas; i++)
        {
            if (i >= paginaAtual - Raio && i <= paginaAtual + Raio)
            {
                links.Add(new LinkModel(i) { Active = paginaAtual == i });
            }
        }



        /* Tratar o link para a proxima pagina */
        var isLinkProximaPaginaHabilitado = paginaAtual != QuantidadeTotalPaginas;
        var proximaPagina = paginaAtual + 1;
        links.Add(new LinkModel(proximaPagina, isLinkProximaPaginaHabilitado, "Proximo"));

    }

    private async Task PaginaSelecionadaLink(LinkModel link)
    {
        if (link.Page == paginaAtual)
            return;

        if (!link.Enabled)
            return;

        paginaAtual = link.Page;
        await PaginaSelecionadaCallBack.InvokeAsync(link.Page);

    }

}
